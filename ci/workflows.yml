components:
  - global_env: &global_env
      env:
        DOCKER_HUB_USERNAME: shepmaster
        GH_CONTAINER_REGISTRY_USERNAME: shepmaster
        AWS_ACCESS_KEY_ID: AKIAWESVHZ3JQAY5NM5K

  - checkout: &checkout
      name: "Checkout code"
      uses: actions/checkout@v2

  # This should only be used when we know that the code being tested
  # doesn't make use of our secrets or elevated GitHub token.
  - checkout_pr: &checkout_pr
      name: "Checkout code"
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}

  - docker_buildx: &docker_buildx
      name: "Set up Docker Buildx"
      uses: docker/setup-buildx-action@v1
      with:
        driver-opts: >-
          image=moby/buildkit:master

  - login_ghcr: &login_ghcr
      name: "Login to GitHub Container Registry"
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ env.GH_CONTAINER_REGISTRY_USERNAME }}
        password: ${{ secrets.GH_CONTAINER_REGISTRY_TOKEN }}

  - login_docker_hub: &login_docker_hub
      name: "Login to Docker Hub"
      uses: docker/login-action@v1
      with:
        username: ${{ env.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

  - build_compiler_containers_job: &build_compiler_containers_job
      name: "Build ${{ matrix.channel }} compiler container"
      runs-on: ubuntu-latest

      strategy:
        matrix:
          channel: [stable, beta, nightly]

  - build_compiler_containers_job_env: &build_compiler_containers_job_env
      IMAGE_NAME: ghcr.io/integer32llc/rust-playground-ci-rust-${{ matrix.channel }}

  - build_compiler_containers_toolchain: &build_compiler_containers_toolchain
      name: "Build and push 'toolchain' container"
      env:
        TAG_PREFIX: ${{ env.IMAGE_NAME }}:toolchain
      uses: docker/build-push-action@v2
      with:
        context: compiler/base/
        file: compiler/base/Dockerfile
        build-args: |-
          channel=${{ matrix.channel }}
        target: toolchain
        pull: true
        push: true
        tags: |-
          ${{ env.TAG_PREFIX }}--${{ github.run_id }}
        cache-from: |-
          ${{ env.TAG_PREFIX }}--${{ github.run_id }}
          ${{ env.TAG_PREFIX }}--latest
        cache-to: type=inline

  - build_compiler_containers_bare_sources: &build_compiler_containers_bare_sources
      name: "Build and push 'bare-sources' container"
      env:
        TAG_PREFIX: ${{ env.IMAGE_NAME }}:bare-sources
      uses: docker/build-push-action@v2
      with:
        context: compiler/base/
        file: compiler/base/Dockerfile
        build-args: |-
          channel=${{ matrix.channel }}
        target: bare-sources
        pull: true
        push: true
        tags: |-
          ${{ env.TAG_PREFIX }}--${{ github.run_id }}
        cache-from: |-
          ${{ env.TAG_PREFIX }}--${{ github.run_id }}
          ${{ env.TAG_PREFIX }}--latest
        cache-to: type=inline

  - build_compiler_containers_munge: &build_compiler_containers_munge
      name: "Build and push 'munge' container"
      env:
        TAG_PREFIX: ${{ env.IMAGE_NAME }}:munge
      uses: docker/build-push-action@v2
      with:
        context: compiler/base/
        file: compiler/base/Dockerfile
        build-args: |-
          channel=${{ matrix.channel }}
        target: munge
        pull: true
        push: true
        tags: |-
          ${{ env.TAG_PREFIX }}--${{ github.run_id }}
        cache-from: |-
          ${{ env.TAG_PREFIX }}--${{ github.run_id }}
          ${{ env.TAG_PREFIX }}--latest
        cache-to: type=inline

  - build_compiler_containers_sources: &build_compiler_containers_sources
      name: "Build and push 'sources' container"
      env:
        TAG_PREFIX: ${{ env.IMAGE_NAME }}:sources
      uses: docker/build-push-action@v2
      with:
        context: compiler/base/
        file: compiler/base/Dockerfile
        build-args: |-
          channel=${{ matrix.channel }}
        target: sources
        pull: true
        push: true
        tags: |-
          ${{ env.TAG_PREFIX }}--${{ github.run_id }}
        cache-from: |-
          ${{ env.TAG_PREFIX }}--${{ github.run_id }}
          ${{ env.TAG_PREFIX }}--latest
        cache-to: type=inline

  - build_compiler_containers_final: &build_compiler_containers_final
      name: "Build and push container"
      uses: docker/build-push-action@v2
      with:
        context: compiler/base/
        file: compiler/base/Dockerfile
        build-args: |-
          channel=${{ matrix.channel }}
        pull: true
        push: true
        tags: |-
          ${{ env.IMAGE_NAME }}:${{ github.run_id }}
        cache-from: |-
          ${{ env.IMAGE_NAME }}:${{ github.run_id }}
          ${{ env.IMAGE_NAME }}:latest
        cache-to: type=inline

  - build_tool_containers_job: &build_tool_containers_job
      name: "Build ${{ matrix.tool }} tool container"
      runs-on: ubuntu-latest
      needs: build_compiler_containers

      strategy:
        matrix:
          tool: [clippy, miri, rustfmt]

  - build_tool_containers_job_env: &build_tool_containers_job_env
      IMAGE_NAME: ghcr.io/integer32llc/rust-playground-ci-tool-${{ matrix.tool }}

  - build_tool_containers_final: &build_tool_containers_final
      name: "Build and push container"
      uses: docker/build-push-action@v2
      with:
        context: compiler/${{ matrix.tool }}/
        file: compiler/${{ matrix.tool }}/Dockerfile
        build-args: |-
          base_image=ghcr.io/integer32llc/rust-playground-ci-rust-nightly:sources--${{ github.run_id }}
        pull: true
        push: true
        tags: |-
          ${{ env.IMAGE_NAME }}:${{ github.run_id }}
        cache-from: |-
          ${{ env.IMAGE_NAME }}:${{ github.run_id }}
          ${{ env.IMAGE_NAME }}:latest
        cache-to: type=inline

  - pull_containers: &pull_containers
      name: "Pull containers"
      run: |-
        echo ghcr.io/integer32llc/rust-playground-ci-{rust-{stable,beta,nightly},tool-{clippy,rustfmt,miri}}:${{ github.run_id }} | xargs -n1 docker pull

  - rename_all_containers: &rename_all_containers
      name: "Rename containers"
      run: |-
        for c in stable beta nightly; do
          docker tag ghcr.io/integer32llc/rust-playground-ci-rust-$c:${{ github.run_id }} ghcr.io/integer32llc/rust-playground-ci-rust-$c
          docker tag ghcr.io/integer32llc/rust-playground-ci-rust-$c:${{ github.run_id }} shepmaster/rust-$c
          docker tag ghcr.io/integer32llc/rust-playground-ci-rust-$c:${{ github.run_id }} rust-$c
        done
        for t in clippy miri rustfmt; do
          docker tag ghcr.io/integer32llc/rust-playground-ci-tool-$t:${{ github.run_id }} ghcr.io/integer32llc/rust-playground-ci-tool-$t
          docker tag ghcr.io/integer32llc/rust-playground-ci-tool-$t:${{ github.run_id }} shepmaster/$t
          docker tag ghcr.io/integer32llc/rust-playground-ci-tool-$t:${{ github.run_id }} $t
        done

  - pull_current_container: &pull_current_container
      name: "Pull container"
      run: |-
        docker pull ${{ env.IMAGE_NAME }}:${{ github.run_id }}

  - rename_current_container: &rename_current_container
      name: "Rename container"
      run: |-
        docker tag ${{ env.IMAGE_NAME }}:${{ github.run_id }} ${{ env.IMAGE_NAME }}
        docker tag ${{ env.IMAGE_NAME }}:${{ github.run_id }} ${{ env.DOCKER_HUB_IMAGE_NAME }}

  - push_current_container: &push_current_container
      name: "Push container"
      run: |-
        docker push ${{ env.IMAGE_NAME }}
        docker push ${{ env.DOCKER_HUB_IMAGE_NAME }}

workflows:
  ci:
    name: "Validate everything"

    'on':
      push:
        branches:
          - master
      pull_request_target:
        types: [labeled]
        branches:
          - master

    <<: *global_env

    jobs:
      build_compiler_containers:
        <<: *build_compiler_containers_job
        if: "github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'CI: approved')"
        env:
          <<: *build_compiler_containers_job_env

        steps:
          - *checkout_pr
          - *docker_buildx
          - *login_ghcr
          - *build_compiler_containers_toolchain
          - *build_compiler_containers_bare_sources
          - *build_compiler_containers_munge
          - *build_compiler_containers_sources
          - *build_compiler_containers_final

      build_tool_containers:
        <<: *build_tool_containers_job
        if: "github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'CI: approved')"
        env:
          <<: *build_tool_containers_job_env

        steps:
          - *checkout_pr
          - *docker_buildx
          - *login_ghcr
          - *build_tool_containers_final

      build_backend:
        name: "Build backend"
        runs-on: ubuntu-latest
        if: "github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'CI: approved')"

        steps:
          - *checkout_pr

          - name: "Cache Cargo intermediate products"
            uses: actions/cache@v2
            with:
              path: |-
                ~/.cargo/registry
                ~/.cargo/git
                ui/target
              key: ${{ runner.os }}-cargo-${{ hashFiles('ui/**/Cargo.lock') }}-2

          - name: "Build backend"
            run: >-
                mkdir -p ui/target;
                docker
                run
                --rm
                -v $PWD/ui:/ui
                -v ~/.cargo/git:/home/rust/.cargo/git
                -v ~/.cargo/registry:/home/rust/.cargo/registry
                --workdir /ui
                ekidd/rust-musl-builder:stable
                bash -c '
                  sudo chown -R rust:rust /home/rust/.cargo /ui/target;
                  cargo build --locked --target=x86_64-unknown-linux-musl --release
                '

          - name: "Restore permissions"
            run: >-
              sudo chown -R runner:docker ~/.cargo/ ui/target

          - name: "Save backend artifact"
            uses: actions/upload-artifact@v2
            with:
              name: backend
              path: ui/target/x86_64-unknown-linux-musl/release/ui

      build_frontend:
        name: "Build frontend"
        runs-on: ubuntu-latest
        if: "github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'CI: approved')"

        steps:
          - *checkout_pr

          - name: "Get yarn cache directory path"
            id: yarn-cache-dir-path
            run: echo "::set-output name=dir::$(yarn cache dir)"

          - name: "Cache yarn intermediate products"
            uses: actions/cache@v2
            with:
              path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
              key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
              restore-keys: |-
                ${{ runner.os }}-yarn-

          - name: "Configure node"
            uses: actions/setup-node@v1
            with:
              node-version: 14.15

          - name: "Install dependencies"
            run: >-
              yarn --cwd ui/frontend/

          - name: "Run tests"
            run: >-
              yarn --cwd ui/frontend/ test

          - name: "Lint"
            run: >-
              yarn --cwd ui/frontend/ test:lint

          - name: "Style"
            run: >-
              yarn --cwd ui/frontend/ test:style

          - name: "Build frontend"
            run: >-
              yarn --cwd ui/frontend/ run build:production

          - name: "Save frontend artifact"
            uses: actions/upload-artifact@v2
            with:
              name: frontend
              path: ui/frontend/build

      run_integration_tests:
        name: "Running integration tests"
        runs-on: ubuntu-latest
        if: "github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'CI: approved')"
        needs:
          - build_compiler_containers
          - build_tool_containers
          - build_backend
          - build_frontend

        defaults:
          run:
            working-directory: tests

        steps:
          - *checkout_pr

          - name: "Configure Ruby"
            uses: actions/setup-ruby@v1
            with:
              ruby-version: '2.7'

          - name: "Cache bundler intermediate products"
            uses: actions/cache@v2
            with:
              path: tests/vendor/bundle
              key: ${{ runner.os }}-gems-${{ hashFiles('tests/**/Gemfile.lock') }}
              restore-keys: |-
                ${{ runner.os }}-gems-

          - name: "Install gems"
            run: |-
              gem install bundler
              bundle config path vendor/bundle
              bundle install --jobs 4 --retry 3

          - *pull_containers
          - *rename_all_containers

          - name: "Download backend"
            uses: actions/download-artifact@v2
            with:
              name: backend
              path: tests/server/

          - name: "Download frontend"
            uses: actions/download-artifact@v2
            with:
              name: frontend
              path: tests/server/build/

          - name: "Run tests"
            env:
              PLAYGROUND_UI_ROOT: server/build/
              PLAYGROUND_CORS_ENABLED: true
              PLAYGROUND_GITHUB_TOKEN: ${{ secrets.PLAYGROUND_GITHUB_TOKEN }}
            run: |-
              chmod +x ./server/ui && ./server/ui &
              bundle exec rspec

          - name: "Preserve screenshots"
            if: ${{ failure() }}
            uses: actions/upload-artifact@v2
            with:
              name: test-failures
              path: tests/test-failures

      release_artifacts:
        name: "Release artifacts"
        runs-on: ubuntu-latest
        needs:
          - run_integration_tests
        if: github.event_name == 'push' && github.event.ref == 'refs/heads/master'

        steps:
          - *login_ghcr

          - name: "Login to Docker Hub"
            uses: docker/login-action@v1
            with:
              username: ${{ env.DOCKER_HUB_USERNAME }}
              password: ${{ secrets.DOCKER_HUB_TOKEN }}

          - name: "Login to AWS"
            uses: aws-actions/configure-aws-credentials@v1
            with:
              aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: us-east-2

          - *pull_containers
          - *rename_all_containers

          - name: "Push containers"
            run: |-
              for c in stable beta nightly; do
                docker push ghcr.io/integer32llc/rust-playground-ci-rust-$c
                docker push shepmaster/rust-$c
              done
              for t in clippy miri rustfmt; do
                docker push ghcr.io/integer32llc/rust-playground-ci-tool-$t
                docker push shepmaster/$t
              done

          - name: "Download backend"
            uses: actions/download-artifact@v2
            with:
              name: backend
              path: server/

          - name: "Download frontend"
            uses: actions/download-artifact@v2
            with:
              name: frontend
              path: server/build/

          - name: "Push backend"
            run: |-
              aws s3 cp server/ui s3://playground-artifacts-i32

          - name: "Push frontend"
            run: |-
              aws s3 sync server/build/ s3://playground-artifacts-i32/build

  cron:
    name: "Scheduled rebuild"

    'on':
      workflow_dispatch:
      schedule:
        # Nightlies are available ~1am UTC, should definitely be out by 2am
        - cron:  '7 2 * * *'

    <<: *global_env

    jobs:
      build_compiler_containers:
        <<: *build_compiler_containers_job
        env:
          <<: *build_compiler_containers_job_env
          DOCKER_HUB_IMAGE_NAME: shepmaster/rust-${{ matrix.channel }}
        continue-on-error: true

        steps:
          - *checkout
          - *docker_buildx
          - *login_ghcr
          - *login_docker_hub
          - *build_compiler_containers_toolchain
          - *build_compiler_containers_bare_sources
          - *build_compiler_containers_munge
          - *build_compiler_containers_sources
          - *build_compiler_containers_final

          - *pull_current_container
          - *rename_current_container
          - *push_current_container

      build_tool_containers:
        <<: *build_tool_containers_job
        env:
          <<: *build_tool_containers_job_env
          DOCKER_HUB_IMAGE_NAME: shepmaster/${{ matrix.tool }}
        continue-on-error: true

        steps:
          - *checkout
          - *docker_buildx
          - *login_ghcr
          - *login_docker_hub
          - *build_tool_containers_final

          - *pull_current_container
          - *rename_current_container
          - *push_current_container
